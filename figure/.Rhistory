as.POSIXct(format(as.POSIXct(date), tz = "UTC"), tz = "GMT")
# Lubridate compa
date <- dmy("01-01-2010")
month(date)
month(date) <- 2
date <- date - days(1)
with_tz(date, "GMT")
# Section 3. Parsing date-times
mdy("12-01-2010")  #"2010-12-01 UTC"
dmy("12-01-2010")  #"2010-01-12 UTC"
dmy(c("31.12.2010", "01.01.2011"))  #"2010-12-31 UTC" "2011-01-01 UTC"
# Section 4. Manipulating date-times
date <- now()
year(date)
month(date)
month(date, label = TRUE)
month(date, label = TRUE, abbr = FALSE)
wday(date, label = TRUE, abbr = FALSE)
day(date) <- 5
dates <- ymd_hms("2010-01-01 01:00:00", "2010-01-01 01:30:00")
minute(dates) <- mean(minute(dates))
day(date) <- 30
day(date) <- 1
month(date) <- month(date) + 1
day(date) <- day(date) - 1
update(date, year = 2010, month = 1, day = 1)
hour(date) <- 12
date <- date + hours(3)
# Section 5. Arithmetic with date-times
## Section 5.1. Instants
start_2012 <- ymd_hms("2012-01-01 12:00:00")
is.instant(364)  #FALSE
is.instant(start_2012)  #TRUE
## Section 5.2. Intervals
start_2011 <- ymd_hms("2011-01-01 12:00:00")
start_2010 <- ymd_hms("2010-01-01 12:00:00")
span <- start_2011 - start_2010  #2010-01-01 12:00:00 - 2011-01-01 12:00:00
int_start(span)  #"2010-01-01 12:00:00 UTC"
int_end(span)  #"2011-01-01 12:00:00 UTC"
start_2010 + span  #"2011-01-01 12:00:00 UTC"
start_2011 + span  #"2012-01-01 12:00:00 UTC"
as.interval(difftime(start_2011, start_2010), ymd("2010-03-05"))  #2010-03-05 - 2011-03-05
# Section 5.3. Durations
new_duration(60)  #60s
dminutes(1)  #60s
dseconds(60)  #60s
dminutes(2)  #120s
c(1:3) * dhours(1)  #3600s (1h) 7200s (2h) 10800s (3h)
start_2011 + dyears(1)  #"2012-01-01 12:00:00 UTC"
start_2012 <- ymd_hms("2012-01-01 12:00:00")
start_2012 + dyears(1)   #"2012-12-31 12:00:00 UTC"
dweeks(1) + ddays(6) + dhours(2) + dminutes(1.5) + dseconds(3)  #1130493s (13.08d)
as.duration(span)  #31536000s (365d)
## Section 5.4. Periods
months(3)  #3 months
months(3) + days(2)  #3 months and 2 days
start_2012 + years(1)  #"2013-01-01 12:00:00 UTC"
start_2012 + dyears(1)  #"2012-12-31 12:00:00 UTC"
as.period(span)  #1 year
## Section 5.5. Division with timespans
halloween <- ymd("2010-10-31")
christmas <- ymd("2010-12-25")
interval <- new_interval(halloween, christmas)  #2010-10-31 - 2010-12-25
interval / dweeks(1)  #7.857143
interval / new_interval(halloween, halloween + weeks(1))  #7.857143
interval %% months(1)  #24 days
interval / months(1)  #1
interval %/% months(1)  #1
# Section 6. Rounding dates
april20 <- ymd_hms("2010-04-20 11:33:29")
round_date(april20, "day")  #"2010-04-20 UTC"
round_date(april20, "month")  #"2010-05-01 UTC"
ceiling_date(april20, "month") - days(1)  #"2010-04-30 UTC"
# Section 7. Time zones
date
with_tz(date, "UTC")  #"2010-01-01 15:51:48 UTC"
date
force_tz(date, "UTC")  #"2010-01-01 09:51:48 UTC"
# Section 8. Daylight savings time
dst_time <- ymd_hms("2010-03-14 01:59:59")
dst_time <- force_tz(dst_time, "America/Chicago")  #"2010-03-14 01:59:59 CST"
dst_time + dseconds(1)  #"2010-03-14 03:00:00 CDT"
dst_time + hours(2)  #"2010-03-14 03:59:59 CDT"
dst_time + dhours(2)  #"2010-03-14 04:59:59 CDT"
# Section 9. Case study 1
## Section 9.1. Thanksgiving
date <- ymd("2010-01-01")  #"2010-01-01 UTC"
month(date) <- 11  #"2010-11-01 UTC"
wday(date, label = TRUE, abbr = FALSE)  #Monday
date <- date + days(3)  #"2010-11-04 UTC"
wday(date, label = TRUE, abbr = FALSE)  #Thursday
date + weeks(3)  #"2010-11-25 UTC"
## Section 9.2. Memorial Day
date <- ymd("2010-01-01")  #"2010-01-01 UTC"
month(date) <- 5  #"2010-05-01 UTC"
date <- ceiling_date(date, "month") - days(1)  #"2010-05-31 UTC"
wday(date, label = TRUE, abbr = FALSE)  #Monday
# Section 10. Case study 2
str(lakers$date)
lakers$date <- ymd(lakers$date)
str(lakers$date)
library("ggplot2")
qplot(date, 0, data = lakers, colour = game_type)
qplot(wday(date, label = TRUE), data = lakers, geom = "histogram")
qplot(date, 0, data = lakers, colour = game_type)
qplot(wday(date, label = TRUE), data = lakers, geom = "histogram")
qplot(wday(date, label = TRUE), data = lakers, geom = "histogram", stat = 'count')
lakers$time <- ms(lakers$time)
,
lakers$time <- as.duration(lakers$time)
lakers$time <- dminutes(c(12, 24, 36, 48, 53)[lakers$period]) -
lakers$time
qplot(time, data = lakers, geom = "histogram", binwidth = 60)
lakers$minutes <- ymd("2008-01-01") + lakers$time
qplot(minutes, data = lakers, geom = "histogram", binwidth = 60)
game1 <- lakers[lakers$date == ymd("20081225"),]
attempts <- game1[game1$etype == "shot",]
attempts$wait <- c(attempts$time[1], diff(attempts$time))
hist(exp_d_m$means, freq = F)
####   PLot
hist(power_consumption$Global_active_power)
qplot(power_consumption$Global_active_power)
hist(power_consumption$Global_active_power, freq = F)
lines(density(power_consumption$Global_active_power), col= 'red', lwd= 3)
lines(density(power_consumption$Global_active_power), col= 'green', lwd= 3)
lines(density(power_consumption$Global_active_power), col= 'blue', lwd= 3)
hist(power_consumption$Global_active_power, col = 'red', xlab = 'asd')
hist(power_consumption$Global_active_power, col = 'red', xlab = 'Global Active Power(KW) ')
plot1 <- hist(power_consumption$Global_active_power, col = 'red', xlab = 'Global Active Power(KW) ')
plot1
bng( file = “plot.bng”)
bng( file = 'plot.bng')
png( file = 'plot.png')
hist(power_consumption$Global_active_power,
col = 'red',
xlab = 'Global Active Power(KW) ')
dev.off()
setwd("~/Data_Science/GitHub/ExData_Plotting1")
png( file = 'plot1.png')
hist(power_consumption$Global_active_power,
col = 'red',
xlab = 'Global Active Power(KW) ')
dev.off()
setwd("~/Data_Science/GitHub/ExData_Plotting1")
setwd("~/Data_Science/GitHub/ExData_Plotting1/figure")
png( file = '~/Data_Science/GitHub/ExData_Plotting1/figure/plot1.png')
hist(power_consumption$Global_active_power,
col = 'red',
xlab = 'Global Active Power(KW) ')
dev.off()
width = 480, height = 480)
width = '480', height = '480')
width = 480 , height = 480)
width = 480  height = 480)
png( filename ='~/Data_Science/GitHub/ExData_Plotting1/figure/plot1.png',width = 480, height = 480 )
plot(power_consumption$Global_active_power, power_consumption$Date)
plot(power_consumption$Global_active_power, power_consumption$Date)
plot(power_consumption$Date, power_consumption$Global_active_power )
plot(power_consumption$Time, power_consumption$Global_active_power )
dateM <- as.Date(power_consumption$Date)
plot(dateM, power_consumption$Global_active_power )
qplot(dateM, power_consumption$Global_active_power)
plot(dateM, power_consumption$Global_active_power, type = 1)
plot(dateM, power_consumption$Global_active_power, type = '1')
plot(dateM, power_consumption$Global_active_power, type = 'l')
plot(dateM, power_consumption$Global_active_power, )
plot(power_consumption$Time, power_consumption$Global_active_power, )
plot(power_consumption$Time, power_consumption$Global_active_power, )
power_consumption
require(ggplot2)
theme_set(theme_bw()) # Change the theme to my preference
variable), data = data) + geom_point()
ggplot(aes(x = power_consumption$Date,
y = power_consumption$Global_active_power  variable),
data = data) +
geom_point()
ggplot(aes(x = power_consumption$Date,
y = power_consumption$Global_active_power  variable),
data = data) +
geom_point()
require(ggplot2)
theme_set(theme_bw()) # Change the theme to my preference
ggplot(aes(x = power_consumption$Date,
y = power_consumption$Global_active_power  variable),
data = data) +
geom_point()
ggplot(aes(x = power_consumption$Date,
y = power_consumption$Global_active_power  variable),
data = data) +   geom_point()
require(ggplot2)
theme_set(theme_bw()) # Change the theme to my preference
ggplot(aes(x = Date,
y = Global_active_power),
data = power_consumption) +   geom_point()
dmy(paste(power_consumption$Date,power_consumption$Time, sep = ''))
str(power_consumption)
power_consumption <- filter(data, Date == "1/2/2007" | Date == "2/2/2007")
str(power_consumption)
dmy(paste(power_consumption$Date,power_consumption$Time, sep = ''))
dmy(paste0(power_consumption$Date,power_consumption$Time, sep = ''))
paste0(power_consumption$Date,power_consumption$Time, sep = '')
datetime <- paste0(power_consumption$Date, power_consumption$Time)
datetime
str(datetime)
dmy_hms(datetime)
?dmy_hms
x <- c("2010-04-14-04-35-59", "2010-04-01-12-00-00")
ymd_hms(x)
x <- c("2010/04/14-04-35-59", "2010-04-01-12-00-00")
ymd_hms(x)
datetime <- paste(power_consumption$Date, power_consumption$Time, sep = '/')
dmy_hms(datetime)
datetime <- dmy_hms(paste(power_consumption$Date, power_consumption$Time, sep = '/'))
mod_data < power_consumption %>%
mutate(datetime = datetime)
mod_data <- power_consumption %>%
mutate(datetime = datetime)
mod_data
require(ggplot2)
theme_set(theme_bw()) # Change the theme to my preference
ggplot(aes(x = datetime,
y = Global_active_power),
data = mod_data) +   geom_point()
ggplot(aes(x = datetime,
+            y = Global_active_power),
+        data = mod_data) +   geom_line()
ggplot(aes(x = datetime, y = Global_active_power),
+ data = mod_data) +   geom_line()
+        data = mod_data) +   geom_point()
ggplot(aes(x = datetime, y = Global_active_power),
+ data = mod_data +   geom_line()
ggplot(aes(x = datetime, y = Global_active_power), data = mod_data +   geom_line()
ggplot(aes(x = datetime, y = Global_active_power, data = mod_data),
+   geom_line()
ggplot(aes(x = datetime, y = Global_active_power, data = mod_data) +   geom_line()
ggplot(aes(x = datetime, y = Global_active_power, data = mod_data) +   geom_line())
ggplot(aes(x = datetime, y = Global_active_power), data = mod_data) +   geom_line()
ggplot(aes(x = datetime, y = Global_active_power, y = Sub_metering_2 ), data = mod_data) +
geom_line() +
ylab('Global avtive Power (KW')
ggplot(aes(x = datetime, y = Global_active_power, Sub_metering_2 ), data = mod_data) +
geom_line() +
ylab('Global avtive Power (KW')
ggplot(aes(x = datetime, y = log10(Global_active_power), Sub_metering_2 ,Sub_metering_2, Sub_metering_3), data = mod_data) +
geom_line() +
ylab('Global avtive Power (KW')
ggplot(mod_data, aes(datetime)) +  # basic graphical object
geom_line(aes(y = Global_active_power),
colour="red") +  # first layer
geom_line(aes(y= Sub_metering_1),      # second layer
colour="green")
ggplot(mod_data, aes(datetime)) +  # basic graphical object
geom_line(aes(y = Sub_metering_1),    # first layer
colour="red") +
geom_line(aes(y= Sub_metering_2),      # second layer
colour="green")
geom_line(aes(y= Sub_metering_3),      # second layer
colour="blue")
ggplot(mod_data, aes(datetime)) +  # basic graphical object
geom_line(aes(y = Sub_metering_1),    # first layer
colour="red") +
geom_line(aes(y= Sub_metering_2),      # second layer
colour="green")+
geom_line(aes(y= Sub_metering_3),      # second layer
colour="blue")
ggplot(mod_data, aes(datetime)) +  # basic graphical object
geom_line(aes(y = Sub_metering_1),    # first layer
colour="red") +
geom_line(aes(y= Sub_metering_2),      # second layer
colour="green")+
geom_line(aes(y= Sub_metering_3),      # second layer
colour="blue") + label_both()
ggplot(mod_data, aes(datetime)) +  # basic graphical object
geom_line(aes(y = Sub_metering_1),    # first layer
colour="red") +
geom_line(aes(y= Sub_metering_2),      # second layer
colour="green")+
geom_line(aes(y= Sub_metering_3),      # second layer
colour="blue") + label_both('sss')
ggplot(mod_data, aes(datetime)) +  # basic graphical object
geom_line(aes(y = Sub_metering_1),    # first layer
colour="red") +
geom_line(aes(y= Sub_metering_2),      # second layer
colour="green")+
geom_line(aes(y= Sub_metering_3),      # second layer
colour="blue") + labels.default()
ggplot(mod_data, aes(datetime)) +  # basic graphical object
geom_line(aes(y = Sub_metering_1),    # first layer
colour="red") +
geom_line(aes(y= Sub_metering_2),      # second layer
colour="green")+
geom_line(aes(y= Sub_metering_3),      # second layer
colour="blue") + label_both(multi_line = T)
ggplot(mod_data, aes(datetime)) +  # basic graphical object
geom_line(aes(y = Sub_metering_1),    # first layer
colour="red") +
geom_line(aes(y= Sub_metering_2),      # second layer
colour="green")+
geom_line(aes(y= Sub_metering_3),      # second layer
colour="blue") + label_both( labels =c( 'a', 'b')  = multi_line = T)
ggplot(mod_data, aes(datetime)) +  # basic graphical object
geom_line(aes(y = Sub_metering_1),    # first layer
colour="red") +
geom_line(aes(y= Sub_metering_2),      # second layer
colour="green")+
geom_line(aes(y= Sub_metering_3),      # second layer
colour="blue") + label_both( labels =c( 'a', 'b') , = multi_line = T)
ggplot(mod_data, aes(datetime)) +  # basic graphical object
geom_line(aes(y = Sub_metering_1),    # first layer
colour="red") +
geom_line(aes(y= Sub_metering_2),      # second layer
colour="green")+
geom_line(aes(y= Sub_metering_3),      # second layer
colour="blue") + label_both( labels =c( 'a', 'b') , multi_line = T)
ggplot(mod_data, aes(datetime)) +  # basic graphical object
geom_line(aes(y = Sub_metering_1),    # first layer
colour="red") +
geom_line(aes(y= Sub_metering_2),      # second layer
colour="green")+
geom_line(aes(y= Sub_metering_3),      # second layer
colour="blue") + label_both( labels =c( 'a', 'b'. 'c') , multi_line = T)
ggplot(mod_data, aes(datetime)) +  # basic graphical object
geom_line(aes(y = Sub_metering_1),    # first layer
colour="red") +
geom_line(aes(y= Sub_metering_2),      # second layer
colour="green")+
geom_line(aes(y= Sub_metering_3),      # second layer
colour="blue") + label_both( labels =c( 'a', 'b', 'c') , multi_line = T)
ggplot(mod_data, aes(datetime)) +  # basic graphical object
geom_line(aes(y = Sub_metering_1),    # first layer
colour="red") +
geom_line(aes(y= Sub_metering_2),      # second layer
colour="green")+
geom_line(aes(y= Sub_metering_3),      # second layer
colour="blue")
ggplot(mod_data, aes(datetime)) +  # basic graphical object
geom_line(aes(y = Sub_metering_1),     # first layer
colour="red") +
geom_line(aes(y= Sub_metering_2),      # second layer
colour="green")+
geom_line(aes(y= Sub_metering_3),      # second layer
colour="blue") + theme_bw()
ggplot(mod_data, aes(x = datetime)) +       # basic graphical object
geom_line(aes(y = Sub_metering_1),     # first layer
colour="red") +
geom_line(aes(y= Sub_metering_2),      # second layer
colour="green")+
geom_line(aes(y= Sub_metering_3),      # second layer
colour="blue")
ggplot(mod_data, aes(x = datetime )) +       # basic graphical object
geom_line(aes(y = Sub_metering_1 ),     # first layer
colour="red") +
geom_line(aes(y= Sub_metering_2),       # second layer
colour="green")+
geom_line(aes(y= Sub_metering_3),       # second layer
colour="blue")  + facet_wrap()
ggplot(mod_data, aes(x = datetime )) +       # basic graphical object
geom_line(aes(y = Sub_metering_1 ),     # first layer
colour="red") +
geom_line(aes(y= Sub_metering_2),       # second layer
colour="green")+
geom_line(aes(y= Sub_metering_3),       # second layer
colour="blue")  + facet_wrap(Sub_metering ~)
ggplot(mod_data, aes(x = datetime )) +       # basic graphical object
geom_line(aes(y = Sub_metering_1 ),     # first layer
colour="red") +
geom_line(aes(y= Sub_metering_2),       # second layer
colour="green")+
geom_line(aes(y= Sub_metering_3),       # second layer
colour="blue")  + facet_wrap(Sub_metering )
ggplot(mod_data, aes(x = datetime )) +       # basic graphical object
geom_line(aes(y = Sub_metering_1 ),     # first layer
colour="red") +
geom_line(aes(y= Sub_metering_2),       # second layer
colour="green")+
geom_line(aes(y= Sub_metering_3),       # second layer
colour="blue")  + facet_wrap(Sub_metering_2 )
ggplot(mod_data, aes(x = datetime )) +       # basic graphical object
geom_line(aes(y = Sub_metering_1 ),     # first layer
colour="red") +
geom_line(aes(y= Sub_metering_2),       # second layer
colour="green")+
geom_line(aes(y= Sub_metering_3),       # second layer
colour="blue")  + facet_wrap( Date
)
ggplot(mod_data, aes(x = datetime )) +       # basic graphical object
geom_line(aes(y = Sub_metering_1 ),     # first layer
colour="red") +
geom_line(aes(y= Sub_metering_2),       # second layer
colour="green")+
geom_line(aes(y= Sub_metering_3),       # second layer
colour="blue")  + facet_wrap( datetime )
ggplot(mod_data, aes(x = datetime )) +       # basic graphical object
geom_line(aes(y = Sub_metering_1 ),     # first layer
colour="red") +
geom_line(aes(y= Sub_metering_2),       # second layer
colour="green")+
geom_line(aes(y= Sub_metering_3),       # second layer
colour="blue")  + facet_wrap( Time )
ggplot(mod_data, aes(x = datetime )) +       # basic graphical object
geom_line(aes(y = Sub_metering_1 ),     # first layer
colour="red") +
geom_line(aes(y= Sub_metering_2),       # second layer
colour="green")+
geom_line(aes(y= Sub_metering_3),       # second layer
colour="blue")  + facet_wrap( Voltage )
library("ggplot2")### show info about the datahead(diamonds) head(mtcars)### comparison qplot vs ggplot# qplot histogramqplot(clarity, data=diamonds, fill=cut, geom="bar") # ggplot histogram -> same outputggplot(diamonds, aes(clarity, fill=cut)) + geom_bar()### how to use qplot
library("ggplot2")
### show info about the data
head(diamonds) head(mtcars)
head(diamonds)
head(mtcars)
### comparison qplot vs ggplot
# qplot histogram
qplot(clarity, data=diamonds, fill=cut, geom="bar") # ggplot histogram -> same output
ggplot(diamonds, aes(clarity, fill=cut)) + geom_bar()
qplot(wt, mpg, data=mtcars)
# transform input data with functions
qplot(log(wt), mpg - 10, data=mtcars)
# add aesthetic mapping (hint: how does mapping work)
qplot(wt, mpg, data=mtcars, color=qsec)
# change size of points (hint: color/colour, hint: set aesthetic/mapping)
qplot(wt, mpg, data=mtcars, color=qsec, size=3) qplot(wt, mpg, data=mtcars, colour=qsec, size=I(3))
qplot(wt, mpg, data=mtcars, color=qsec, size=3)
qplot(wt, mpg, data=mtcars, colour=qsec, size=I(3))
qplot(wt, mpg, data=mtcars, alpha=qsec
)
head(mtcars)
qplot(wt, mpg, data=mtcars, colour=cyl) levels(mtcars$cyl)
qplot(wt, mpg, data=mtcars, colour=cyl), levels(mtcars$cyl)
qplot(wt, mpg, data=mtcars, colour=cyl)+ levels(mtcars$cyl)
qplot(wt, mpg, data=mtcars, colour=factor(cyl))
qplot(wt, mpg, data=mtcars, shape=factor(cyl))
qplot(wt, mpg, data=mtcars, size=qsec)
# combine mappings (hint: hollow points, geom-concept, legend combination)
qplot(wt, mpg, data=mtcars, size=qsec, color=factor(carb))
qplot(wt, mpg, data=mtcars, size=qsec, color=factor(carb), shape=I(1)) qplot(wt, mpg, data=mtcars, size=qsec, shape=factor(cyl), geom="point") qplot(wt, mpg, data=mtcars, size=factor(cyl), geom="point")
# bar-plot
qplot(factor(cyl), data=mtcars, geom="bar") # flip plot by 90°
qplot(factor(cyl), data=mtcars, geom="bar") + coord_flip()
# difference between fill/color bars
qplot(factor(cyl), data=mtcars, geom="bar", fill=factor(cyl)) qplot(factor(cyl), data=mtcars, geom="bar", colour=factor(cyl))
qplot(factor(cyl), data=mtcars, geom="bar", fill=factor(cyl))
qplot(factor(cyl), data=mtcars, geom="bar", colour=factor(cyl))
# fill by variable
qplot(factor(cyl), data=mtcars, geom="bar", fill=factor(gear))
# use different display of bars (stacked, dodged, identity)
qplot(clarity, data=diamonds, geom="bar", fill=cut, position="stack")
qplot(clarity, data=diamonds, geom="bar", fill=cut, position="dodge")
qplot(clarity, data=diamonds, geom="bar", fill=cut, position="fill")
qplot(clarity, data=diamonds, geom="bar", fill=cut, position="identity")
qplot(clarity, data=diamonds, geom="freqpoly", group=cut, colour=cut, position="identity")
qplot(clarity, data=diamonds, geom="freqpoly", group=cut, colour=cut, position="stack")
ddply(diamonds, "cut", "nrow")
?ddply
library ('dplyr')
ddply(diamonds, "cut", "nrow")
library ('plyr')
ddply(diamonds, "cut", "nrow")
ddply(diamonds, c("cut", "clarity"), "nrow")
ddply(diamonds, "cut", mean)
ddply(diamonds, "cut", summarise, meanDepth = mean(depth))
ddply(diamonds, "cut", summarise, meanDepth = mean(depth))
ddply(diamonds, "cut", summarise, lower = quantile(depth, 0.25, na.rm=TRUE), median = median(depth, na.rm=TRUE), upper = quantile(depth, 0.75, na.rm=TRUE))
t.function <- function(x,y){
z = sum(x) / sum(x+y)
return(z) }
ddply(diamonds, "cut", summarise, custom = t.function(depth, price)) ddply(diamonds, "cut", summarise, custom = sum(depth) / sum(depth + price)) ### back to ggplot
ddply(diamonds, "cut", summarise, custom = t.function(depth, price))
ddply(diamonds, "cut", summarise, custom = sum(depth) / sum(depth + price))
### back to ggplot histogram
qplot(carat, data=diamonds, geom="histogram")
# change binwidth
qplot(carat, data=diamonds, geom="histogram", binwidth=0.1) qplot(carat, data=diamonds, geom="histogram", binwidth=0.01)
qplot(carat, data=diamonds, geom="histogram", binwidth=0.1)
qplot(carat, data=diamonds, geom="histogram", binwidth=0.01)
# use geom to combine plots (hint: order of layers)
qplot(wt, mpg, data=mtcars, geom=c("point", "smooth"))
qplot(wt, mpg, data=mtcars, geom=c("smooth", "point"))
qplot(wt, mpg, data=mtcars, color=factor(cyl), geom=c("point", "smooth"))
library(ggplot2)
p <- qplot(hp, mpg, data=mtcars, shape=am, color=am,
facets=gear~cyl, main="Scatterplots of MPG vs. Horsepower",
xlab="Horsepower", ylab="Miles per Gallon")
# White background and black grid lines
p <- qplot(hp, mpg, data=mtcars, shape=am, color=am,
facets=gear~cyl, main="Scatterplots of MPG vs. Horsepower",
xlab="Horsepower", ylab="Miles per Gallon")
library(ggplot2)
p <- qplot(hp, mpg, data=mtcars, shape=am, color=am,
facets=gear~cyl, main="Scatterplots of MPG vs. Horsepower",
xlab="Horsepower", ylab="Miles per Gallon")
# White background and black grid lines
p + theme_bw()
# Large brown bold italics labels
# and legend placed at top of plot
p + theme(axis.title=element_text(face="bold.italic",
size="12", color="brown"), legend.position="top")
p
str(mtcars)
qplot(hp, mpg, data= mtcars, shape= am, color= am,
facets= gear~cyl, main="Scatterplots of MPG vs. Horsepower",
xlab="Horsepower", ylab="Miles per Gallon")
qplot(hp, mpg, data= mtcars, shape= am, color= am,
facets= gear~cyl, main="Scatterplots of MPG vs. Horsepower",
xlab="Horsepower", ylab="Miles per Gallon")
qplot(hp, mpg, data= mtcars, shape= factor(am), color= am,
facets= gear~cyl, main="Scatterplots of MPG vs. Horsepower",
xlab="Horsepower", ylab="Miles per Gallon")
qplot(hp, mpg, data= mtcars, shape= factor(am), color= am,
facets= gear~cyl, main="Scatterplots of MPG vs. Horsepower",
xlab="Horsepower", ylab="Miles per Gallon")
